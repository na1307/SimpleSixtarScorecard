<MudPaper Outlined="true">
    <MudStack>
        <MudSpacer />
        <MudText Typo="Typo.body2" Align="Align.Center">@DifficultyName@(Difficulty is not null ? " - " + Difficulty.Value.ToString("D2") : string.Empty)</MudText>
        <MudStack Row="true">
            <MudSpacer />
            <MudNumericField @bind-Value="Score" Label="점수" Variant="Variant.Outlined" Margin="Margin.Dense" HideSpinButtons="true" Disabled="Difficulty is null" Min="0" Max="1000000" Immediate="true" />
            <MudSpacer />
        </MudStack>
        <MudCheckBox @bind-Value="FullCombo" Label="풀 콤보" Color="Color.Primary" Dense="true" Style="display: flex; justify-content: center; align-self: center;" Disabled="Difficulty is null" />
        <MudSpacer />
    </MudStack>
</MudPaper>

@code {
    [Parameter]
    [EditorRequired]
    public required Song Song { get; init; }

    [Parameter]
    [EditorRequired]
    public Mode Mode { get; init; }

    [Parameter]
    [EditorRequired]
    public DifficultyType DifficultyType { get; init; }

    private string DifficultyName =>
        DifficultyType switch
        {
            DifficultyType.Comet => "코멧",
            DifficultyType.Nova => "노바",
            DifficultyType.Supernova => "슈퍼노바",
            DifficultyType.Quasar => "퀘이사",
            DifficultyType.Starlight => "스타라이트",
            _ => throw new ArgumentOutOfRangeException()
        };

    private int? Difficulty => Mode switch
    {
        Mode.Solar => DifficultyType switch
        {
            DifficultyType.Comet => Song.SolarComet,
            DifficultyType.Nova => Song.SolarNova,
            DifficultyType.Supernova => Song.SolarSupernova,
            DifficultyType.Quasar => Song.SolarQuasar,
            DifficultyType.Starlight => Song.SolarStarlight,
            _ => throw new ArgumentOutOfRangeException()
        },
        Mode.Lunar => DifficultyType switch
        {
            DifficultyType.Comet => Song.LunarComet,
            DifficultyType.Nova => Song.LunarNova,
            DifficultyType.Supernova => Song.LunarSupernova,
            DifficultyType.Quasar => Song.LunarQuasar,
            DifficultyType.Starlight => Song.LunarStarlight,
            _ => throw new ArgumentOutOfRangeException()
        },
        _ => throw new ArgumentOutOfRangeException()
    };

    private int Score
    {
        get;
        set
        {
            field = value;
            var existingResult = Profile.Instance.Results.SingleOrDefault(r => r.SongId == Song.Id && r.Mode == Mode && r.Difficulty == DifficultyType);

            if (existingResult is null)
            {
                Profile.Instance.Results.Add(
                    new()
                    {
                        SongId = Song.Id,
                        Mode = Mode,
                        Difficulty = DifficultyType,
                        Score = value,
                        FullCombo = FullCombo
                    });
            }
            else
            {
                existingResult.Score = value;
            }
        }
    }

    private bool FullCombo
    {
        get;
        set
        {
            field = value;
            var existingResult = Profile.Instance.Results.SingleOrDefault(r => r.SongId == Song.Id && r.Mode == Mode && r.Difficulty == DifficultyType);

            if (existingResult is null)
            {
                Profile.Instance.Results.Add(
                    new()
                    {
                        SongId = Song.Id,
                        Mode = Mode,
                        Difficulty = DifficultyType,
                        Score = Score,
                        FullCombo = value
                    });
            }
            else
            {
                existingResult.FullCombo = value;
            }
        }
    }

    protected override void OnInitialized()
    {
        var existingResult = Profile.Instance.Results.SingleOrDefault(r => r.SongId == Song.Id && r.Mode == Mode && r.Difficulty == DifficultyType);

        if (existingResult is null)
        {
            return;
        }

        Score = existingResult.Score;
        FullCombo = existingResult.FullCombo;
    }
}
