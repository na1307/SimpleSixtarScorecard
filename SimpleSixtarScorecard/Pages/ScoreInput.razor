@using CommunityToolkit.Mvvm.DependencyInjection

<MudStack>
    <MudStack Row="true">
        <MudImage Src="@ImageName" Width="204" Height="32" Style="display: flex; justify-content: center; align-self: center;" />
        <MudText Typo="Typo.h6" Inline="true" Class="difficulty-number" Style="color: white; font-family: Montserrat; margin-left: -50px;">@(Difficulty?.ToString("D2") ?? string.Empty)</MudText>
    </MudStack>
    <MudStack Row="true">
        <MudSpacer />
        <MudNumericField @bind-Value="Score" Label="점수" Variant="Variant.Outlined" Margin="Margin.Dense" HideSpinButtons="true" Disabled="Difficulty is null" Min="0" Max="1000000" />
        <MudImage Src="@RankImageName" Width="50" Height="50" />
        <MudSpacer />
    </MudStack>
    <MudCheckBox @bind-Value="FullCombo" Label="풀 콤보" Color="Color.Primary" Dense="true" Style="display: flex; justify-content: center; align-self: center;" Disabled="Difficulty is null" />
</MudStack>

@code {
    private static readonly ResultContext Context = Ioc.Default.GetRequiredService<ResultContext>();

    [Parameter]
    [EditorRequired]
    public required Song Song { get; init; }

    [Parameter]
    [EditorRequired]
    public Mode Mode { get; init; }

    [Parameter]
    [EditorRequired]
    public DifficultyType DifficultyType { get; init; }

    private string ImageName =>
        DifficultyType switch
        {
            DifficultyType.Comet => "images/Comet.png",
            DifficultyType.Nova => "images/Nova.png",
            DifficultyType.Supernova => "images/Supernova.png",
            DifficultyType.Quasar => "images/Quasar.png",
            DifficultyType.Starlight => "images/Starlight.png",
            _ => throw new ArgumentOutOfRangeException()
        };

    private int? Difficulty => Mode switch
    {
        Mode.Lunar => DifficultyType switch
        {
            DifficultyType.Comet => Song.LunarComet,
            DifficultyType.Nova => Song.LunarNova,
            DifficultyType.Supernova => Song.LunarSupernova,
            DifficultyType.Quasar => Song.LunarQuasar,
            DifficultyType.Starlight => Song.LunarStarlight,
            _ => throw new ArgumentOutOfRangeException()
        },
        Mode.Solar => DifficultyType switch
        {
            DifficultyType.Comet => Song.SolarComet,
            DifficultyType.Nova => Song.SolarNova,
            DifficultyType.Supernova => Song.SolarSupernova,
            DifficultyType.Quasar => Song.SolarQuasar,
            DifficultyType.Starlight => Song.SolarStarlight,
            _ => throw new ArgumentOutOfRangeException()
        },
        _ => throw new ArgumentOutOfRangeException()
    };

    private int Score
    {
        get;
        set
        {
            field = value;
            var existingResult = Context.Results.Find(Song.Id, Mode, DifficultyType);

            if (existingResult is null)
            {
                Context.Results.Add(new(Song.Id, Mode, DifficultyType, value, FullCombo));
            }
            else
            {
                Context.Results.Entry(existingResult).CurrentValues.SetValues(existingResult with { Score = value });
            }

            Context.SaveChanges();
        }
    }

    private string RankImageName =>
        Score switch
        {
            1000000 => "images/Rank_PB.png",
            >= 980000 => "images/Rank_SS.png",
            >= 950000 => "images/Rank_S.png",
            >= 900000 => "images/Rank_APlus.png",
            >= 850000 => "images/Rank_A.png",
            >= 800000 => "images/Rank_BPlus.png",
            >= 700000 => "images/Rank_B.png",
            0 => "images/Rank_Invisible.png",
            _ => "images/Rank_F.png"
        };

    private bool FullCombo
    {
        get;
        set
        {
            field = value;
            var existingResult = Context.Results.Find(Song.Id, Mode, DifficultyType);

            if (existingResult is null)
            {
                Context.Results.Add(new(Song.Id, Mode, DifficultyType, Score, value));
            }
            else
            {
                Context.Results.Entry(existingResult).CurrentValues.SetValues(existingResult with { FullCombo = value });
            }

            Context.SaveChanges();
        }
    }

    protected override void OnInitialized()
    {
        var existingResult = Context.Results.Find(Song.Id, Mode, DifficultyType);

        if (existingResult is null)
        {
            return;
        }

        Score = existingResult.Score;
        FullCombo = existingResult.FullCombo;
    }
}
